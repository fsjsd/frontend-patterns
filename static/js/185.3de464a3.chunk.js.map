{"version":3,"file":"static/js/185.3de464a3.chunk.js","mappings":"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","sources":["utils/canvas.ts","utils/imagePromise.ts","ux/designsystem/Toolbar.tsx","features/photoeditor/PhotoEditorStyles.tsx","features/photoeditor/PhotoEditor.tsx"],"sourcesContent":["// Utils for working with canvas HTML elements\n\nimport { HSLColor, HSLtoRGB, RGBtoHSL } from \"./color\";\n\n/**\n * Higher order function to retrieve pixel data from canvas element, passing\n * that to given callback function fn and then setting result back to canvas\n * @param fn function to callback with image data\n * @returns \n */\nexport const applyImageDataTransform = (fn: (data: ImageData) => void) => \n  (canvas: HTMLCanvasElement, width: number, height: number) => {\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n    const imageData = ctx.getImageData(0, 0, width, height);\n    fn(imageData);\n    ctx.putImageData(imageData, 0, 0);\n  }\n\n/**\n * Higher order function to apply canvas pixel data transformation, converting each\n * pixel to HSL values first before calling fn()\n * @param fn HSL converstion function\n * @returns \n */\nexport const applyHslDataTransform = (fn: (hsl: HSLColor) => HSLColor) => {\n    return applyImageDataTransform((canvasImageData) => {\n      console.log(canvasImageData.data.length / 4)\n      for (let i = 0; i < canvasImageData.data.length; i += 4) {\n        /*\n        const hsl = RGBtoHSL([\n          canvasImageData[i] / 255,\n          canvasImageData[i + 1] / 255,\n          canvasImageData[i + 2] / 255\n        ]);\n        const hslTransformed = fn(hsl);\n        const rgb = HSLtoRGB(hslTransformed);\n        canvasImageData[i] = rgb[0] * 255;\n        canvasImageData[i + 1] = rgb[1] * 255;\n        canvasImageData[i + 2] = rgb[2] * 255;\n        */\n       const rgb = [\n         canvasImageData[i],\n          canvasImageData[i + 1],\n          canvasImageData[i + 2]\n        ]\n\n        canvasImageData[i] = rgb[0];\n        canvasImageData[i + 1] = rgb[1];\n        canvasImageData[i + 2] = rgb[2];\n      }\n    });\n  }","\n/**\n * Loads an image from a URL and returns a promise that resolves to the image. Util\n * for working with canvas element images\n * @param src image URL ;\n * @returns Promise of Image Element\n */\nexport const imagePromise = (src: string) => {\n  return new Promise<HTMLImageElement>((resolve, reject) => {\n    const img = new Image();\n    img.crossOrigin = \"Anonymous\";\n    img.onload = function () {\n      resolve(img);\n    };\n    img.onerror = function (e) {\n      reject(e);\n    };\n    img.src = src;\n  });\n}","import styled from 'styled-components';\n\nexport const Toolbar = styled.div.attrs({\n  role: \"toolbar\"\n})`\n  background-color:#eff8ff;\n  display:flex;\n  flex-direction:row;\n  cursor:pointer;\n  user-select: none;\n  -moz-user-select: none;\n  -webkit-user-select: none;\n`;\n\nexport const ToolbarButton = styled.div.attrs({\n  role: \"button\"\n})`\n  flex-grow:0;\n\n  display: flex;\n  align-items: center;\n\n  background-color:#eff8ff;\n  padding:1em;\n  \n  &:hover{\n    background-color:#f6fbff;\n    color:black;\n  }\n\n  svg {\n    margin-right:0.25em;\n  }\n`;\n\nexport const ToolbarSpacer = styled.div`\n  flex-grow:2;\n`;\n\nexport const ToolbarLabel = styled.label.attrs({\n  role: \"label\"\n})`\n  padding:1em;\n  align-items:flex-end;\n`;","import styled from \"styled-components\";\r\n\r\nexport const PhotoEditorWrapper = styled.div`\r\n  canvas {\r\n    border: solid 1px #ddd;\r\n  }\r\n`;\r\n\r\nexport default {};","import React, { useLayoutEffect, useRef } from 'react'\r\nimport { MdHdrStrong, MdHdrWeak, MdIso, MdLightbulb, MdLightbulbOutline } from 'react-icons/md';\r\nimport { applyHslDataTransform, applyImageDataTransform } from '../../utils/canvas';\r\nimport { HSLColor } from '../../utils/color';\r\nimport { imagePromise } from '../../utils/imagePromise';\r\nimport { Toolbar, ToolbarButton, ToolbarLabel, ToolbarSpacer } from '../../ux/designsystem/Toolbar';\r\nimport { PhotoEditorWrapper as PhotoEditorWrapper } from './PhotoEditorStyles'\r\n\r\nconst commands = {\r\n  invert: applyImageDataTransform((myImageData: ImageData) => {\r\n    for (let i = 0; i < myImageData.data.length; i += 4) {\r\n      myImageData.data[i] = 255 - myImageData.data[i];\r\n      myImageData.data[i + 1] = 255 - myImageData.data[i + 1];\r\n      myImageData.data[i + 2] = 255 - myImageData.data[i + 2];\r\n    }\r\n  }),\r\n  saturate: applyImageDataTransform((myImageData: ImageData) => {\r\n    for (let i = 0; i < myImageData.data.length; i += 4) {\r\n      myImageData.data[i] = 255 - myImageData.data[i];\r\n      myImageData.data[i + 1] = 255 - myImageData.data[i + 1];\r\n      myImageData.data[i + 2] = 255 - myImageData.data[i + 2];\r\n    }\r\n  }),\r\n  saturateSlow: applyHslDataTransform((hsl: HSLColor) => {\r\n    return [hsl[0], hsl[1] * 1.5, hsl[2]];\r\n  }),\r\n  desaturate: applyImageDataTransform((myImageData: ImageData) => {\r\n    for (let i = 0; i < myImageData.data.length; i += 4) {\r\n      myImageData.data[i] = 255 - myImageData.data[i];\r\n      myImageData.data[i + 1] = 255 - myImageData.data[i + 1];\r\n      myImageData.data[i + 2] = 255 - myImageData.data[i + 2];\r\n    }\r\n  }),\r\n  desaturateSlow: applyHslDataTransform((hsl: HSLColor) => {\r\n    return [hsl[0], hsl[1] * 0.9, hsl[2]];\r\n  }),\r\n  lighten: applyImageDataTransform((myImageData: ImageData) => {\r\n    for (let i = 0; i < myImageData.data.length; i += 4) {\r\n      myImageData.data[i] = 255 - myImageData.data[i];\r\n      myImageData.data[i + 1] = 255 - myImageData.data[i + 1];\r\n      myImageData.data[i + 2] = 255 - myImageData.data[i + 2];\r\n    }\r\n  }),\r\n  darken: applyImageDataTransform((myImageData: ImageData) => {\r\n    for (let i = 0; i < myImageData.data.length; i += 4) {\r\n      myImageData.data[i] = 255 - myImageData.data[i];\r\n      myImageData.data[i + 1] = 255 - myImageData.data[i + 1];\r\n      myImageData.data[i + 2] = 255 - myImageData.data[i + 2];\r\n    }\r\n  }),\r\n  lightenSlow: applyHslDataTransform((hsl: HSLColor) => {\r\n    return [hsl[0], hsl[1], hsl[2] * 1.05];\r\n  }),\r\n  darkenSlow: applyHslDataTransform((hsl: HSLColor) => {\r\n    return [hsl[0], hsl[1], hsl[2] * 0.95];\r\n  }),\r\n}\r\n\r\nconst draw = async (canvas: HTMLCanvasElement, width: number, height: number) => {\r\n  const ctx = canvas.getContext('2d');\r\n  if (!ctx) {\r\n    return;\r\n  }\r\n  ctx.clearRect(0, 0, width, height);\r\n  const img = await imagePromise('https://picsum.photos/800/500');\r\n  ctx.drawImage(img, 0, 0, width, height);\r\n};\r\n\r\nconst PhotoEditor = () => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const [processingInfo, setProcessingInfo] = React.useState(\"\");\r\n\r\n  const width = 800;\r\n  const height = 600;\r\n\r\n  const pixelCount = width * height;\r\n\r\n  useLayoutEffect(() => {\r\n    if (canvasRef.current) {\r\n      draw(canvasRef.current, width, height)\r\n    }\r\n  }, [canvasRef]);\r\n\r\n  const handleCommand = (command: string) => {\r\n    if (canvasRef.current) {\r\n      requestAnimationFrame(() => {\r\n        let time = performance.now();\r\n        commands[command](canvasRef.current, width, height);\r\n        time = (performance.now() - time) * 1000;\r\n        const rate = pixelCount / time;\r\n        // const pps = (1000000 * rate | 0).toLocaleString();\r\n        const rateInfo = (rate < 1) ? \"less than 1\" : rate.toLocaleString();\r\n        // const debug = command + \". Time to process \" + pixelCount.toLocaleString() + \" pixels: \" + (time | 0).toLocaleString() + \"µs. \" + rateInfo + \"pix per µs. \" + pps + \" pixel per second\";\r\n        setProcessingInfo(`${rateInfo} pixels per µs`);\r\n\r\n        // For HD pictures need a rate of about 125 pix per µs\r\n        // 1. Code Start\r\n        // saturate: 1.175 pix per µs\r\n        // 2. color type array conversion\r\n        // saturate: 1.325 pix per µs\r\n        // invert is 68.571 pix per µs\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <PhotoEditorWrapper>\r\n      <Toolbar>\r\n        <ToolbarButton onClick={() => handleCommand('invert')}>\r\n          <MdIso /> Invert</ToolbarButton>\r\n        <ToolbarButton onClick={() => handleCommand('saturate')}>\r\n          <MdHdrStrong /> Saturate</ToolbarButton>\r\n        <ToolbarButton onClick={() => handleCommand('desaturate')}>\r\n          <MdHdrWeak /> Desaturate</ToolbarButton>\r\n        <ToolbarButton onClick={() => handleCommand('lighten')}>\r\n          <MdLightbulbOutline /> Lighten\r\n        </ToolbarButton>\r\n        <ToolbarButton onClick={() => handleCommand('darken')}>\r\n          <MdLightbulb /> Darken\r\n        </ToolbarButton>\r\n        <ToolbarSpacer />\r\n        <ToolbarLabel>\r\n          {processingInfo}\r\n        </ToolbarLabel>\r\n      </Toolbar>\r\n      <canvas\r\n        ref={canvasRef}\r\n        width={width}\r\n        height={height}\r\n      ></canvas>\r\n    </PhotoEditorWrapper>\r\n  )\r\n}\r\n\r\nexport default PhotoEditor\r\n"],"names":["applyImageDataTransform","fn","canvas","width","height","ctx","getContext","imageData","getImageData","putImageData","applyHslDataTransform","canvasImageData","console","log","data","length","i","rgb","imagePromise","src","Promise","resolve","reject","img","Image","crossOrigin","onload","onerror","e","Toolbar","styled","role","ToolbarButton","ToolbarSpacer","ToolbarLabel","PhotoEditorWrapper","commands","invert","myImageData","saturate","saturateSlow","desaturate","desaturateSlow","lighten","darken","lightenSlow","darkenSlow","draw","clearRect","drawImage","canvasRef","useRef","React","processingInfo","setProcessingInfo","useLayoutEffect","current","handleCommand","command","requestAnimationFrame","time","performance","now","rate","rateInfo","toLocaleString","onClick","ref"],"sourceRoot":""}